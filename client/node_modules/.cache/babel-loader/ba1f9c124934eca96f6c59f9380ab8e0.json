{"ast":null,"code":"import { GET_PRODUCTS, GET_PRODUCT_DETAIL, GET_LINE_PRODUCTS, SET_LINE, FOOTER, SEARCH_SUCCESS, SET_SEARCH, ADD_TO_CART, REMOVE_FROM_CART, UPDATE_QUANTITY, UPDATE_CART_COUNT, REMOVE_ALL, TOTAL_CART, CREATE_USER, GET_USER_INFO, POST_REVIEW, GET_REVIEWS, CALCULATE_AVERAGE_RATING, SORT_PRODUCTS_BY_RATING } from \"./Actions\";\nconst initialState = {\n  products: [],\n  filtered: [],\n  detail: [],\n  selectedCategory: \"\",\n  userInfo: [],\n  footer: false,\n  isSearch: false,\n  // searchResults: [], \n  // searchError: null,\n  isLine: false,\n  //Shopping Cart states:\n  shoppingCart: [],\n  cartCount: 0,\n  totalCart: 0,\n  reviews: [],\n  sortedProducts: []\n};\nfunction reducer() {\n  var _action$payload$, _action$payload$$line, _action$payload$2, _action$payload$2$lin;\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case GET_PRODUCTS:\n      return {\n        ...state,\n        products: action.payload,\n        filtered: action.payload\n      };\n    case GET_PRODUCT_DETAIL:\n      return {\n        ...state,\n        detail: action.payload\n      };\n    case GET_LINE_PRODUCTS:\n      console.log(\"State GET_LINE_PRODUCTS:\", state);\n      return {\n        ...state,\n        filtered: ((_action$payload$ = action.payload[0]) === null || _action$payload$ === void 0 ? void 0 : (_action$payload$$line = _action$payload$.lines[0]) === null || _action$payload$$line === void 0 ? void 0 : _action$payload$$line.name) || \"\",\n        products: action.payload\n      };\n    case GET_LINE_PRODUCTS:\n      return {\n        ...state,\n        filtered: ((_action$payload$2 = action.payload[0]) === null || _action$payload$2 === void 0 ? void 0 : (_action$payload$2$lin = _action$payload$2.lines[0]) === null || _action$payload$2$lin === void 0 ? void 0 : _action$payload$2$lin.name) || \"\",\n        products: action.payload\n      };\n    case SET_LINE:\n      return {\n        ...state,\n        isLine: true\n      };\n    case FOOTER:\n      return {\n        ...state,\n        footer: !state.footer\n      };\n\n    ////\n    case SEARCH_SUCCESS:\n      return {\n        ...state,\n        products: action.payload\n      };\n    case SET_SEARCH:\n      return {\n        ...state,\n        isSearch: true\n      };\n    case ADD_TO_CART:\n      const currentItem = state.shoppingCart.find(item => item.id === action.payload.id); // buscar si existe el item primero en el carrito\n      if (currentItem) {\n        console.log(\"Updating quantity for item with ID:\", action.payload.id);\n        return {\n          //si existe, agregarle 1 a la cantidad\n          ...state,\n          shoppingCart: state.shoppingCart.map(item => item.id === action.payload.id ? {\n            ...item,\n            quantity: item.quantity + 1\n          } //si existe el item, actualizá la cantidad y agregale 1\n          : item),\n          cartCount: state.cartCount + 1\n        };\n      } else {\n        console.log(\"Adding new item to the cart:\", action.payload);\n        return {\n          ...state,\n          shoppingCart: [...state.shoppingCart, {\n            ...action.payload,\n            quantity: 1\n          }],\n          cartCount: state.cartCount + 1\n        }; //si no existe, agregalo y agregá una quantity con 1\n      }\n      ;\n    case REMOVE_FROM_CART:\n      const currenItem = state.shoppingCart.find(item => item.id === action.payload); //primero buscar el item\n      if (currenItem) {\n        //si existe el item, evaluar si es mayor que 1 su cantidad\n        if (currenItem.quantity > 1) {\n          return {\n            ...state,\n            shoppingCart: state.shoppingCart.map(item => item.id === action.payload ? {\n              ...item,\n              quantity: item.quantity - 1\n            } : item),\n            // si es mayor que 1, bajar la cantidad en uno\n            cartCount: state.cartCount - 1 // El cartcount también baja en 1\n          };\n        } else {\n          // Si es 1 la cantidad, borrarlo directamente\n          return {\n            ...state,\n            shoppingCart: state.shoppingCart.filter(item => item.id !== action.payload),\n            cartCount: state.cartCount - 1\n          };\n        }\n      }\n      return state;\n    // retornar el estado actual si no se encuentran el item\n\n    case REMOVE_ALL:\n      const {\n        productId,\n        quantityToRemove\n      } = action.payload;\n      return {\n        ...state,\n        shoppingCart: state.shoppingCart.filter(item => item.id !== productId),\n        cartCount: state.cartCount - quantityToRemove\n      };\n    case UPDATE_QUANTITY:\n      const updatedItem = action.payload;\n      if (!updatedItem) {\n        return state; //si no está el item retornar el estado como está\n      }\n\n      return {\n        ...state,\n        shoppingCart: state.shoppingCart.map(item => item.id === updatedItem.id ? updatedItem : item //Buscá el item. Si está, devolvé el item updateado. Sino, devolvé el item así\n        ),\n\n        cartCount: state.cartCount + 1\n      };\n    case UPDATE_CART_COUNT:\n      const increment = action.payload; //si increment viene en true viene en el payload\n      return {\n        ...state,\n        cartCount: increment ? state.cartCount + 1 : state.cartCount - 1\n      };\n    // si increment está en true, sumale uno a la cuenta. Sino, restale 1.\n\n    case TOTAL_CART:\n      const allPrices = state.shoppingCart.map(product => product.price * product.quantity);\n      const total = allPrices.reduce((acc, obj) => acc + obj, 0);\n      return {\n        ...state,\n        totalCart: total\n      };\n    case CREATE_USER:\n      if (action.payload.id) {\n        return {\n          ...state,\n          userInfo: action.payload\n        };\n      }\n    case GET_USER_INFO:\n      return {\n        ...state,\n        userInfo: action.payload\n      };\n    case POST_REVIEW:\n      return {\n        ...state\n      };\n    case GET_REVIEWS:\n      return {\n        ...state,\n        reviews: action.payload\n      };\n    case CALCULATE_AVERAGE_RATING:\n      return {\n        ...state,\n        averageRating: action.payload\n      };\n    case SORT_PRODUCTS_BY_RATING:\n      // Realiza el ordenamiento aquí en función de productRatings y actualiza sortedProducts\n      const sortedProducts = [...state.products].sort((a, b) => {\n        const ratingA = state.reviews.productRatings[a.id] || 0; // Obtén el rating promedio para el producto A\n        const ratingB = state.reviews.productRatings[b.id] || 0; // Obtén el rating promedio para el producto B\n\n        return ratingB - ratingA; // Ordena de mayor a menor rating\n      });\n\n      return {\n        ...state,\n        sortedProducts\n      };\n    default:\n      return state;\n  }\n}\nexport default reducer;\n\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case 'SORT_PRODUCTS_BY_RATING':\n//       // Realiza el ordenamiento aquí en función de reviews y actualiza sortedProducts\n//       const sortedProducts = [...state.products].sort((a, b) => {\n//         const ratingA = state.reviews.find((review) => review.productId === a.id)?.promedioRating || 0;\n//         const ratingB = state.reviews.find((review) => review.productId === b.id)?.promedioRating || 0;\n\n//         return ratingB - ratingA; // Ordena de mayor a menor rating\n//       });\n\n//       return {\n//         ...state,\n//         sortedProducts,\n//       };\n//     // Otros casos...\n//     default:\n//       return state;\n//   }\n// };","map":{"version":3,"names":["GET_PRODUCTS","GET_PRODUCT_DETAIL","GET_LINE_PRODUCTS","SET_LINE","FOOTER","SEARCH_SUCCESS","SET_SEARCH","ADD_TO_CART","REMOVE_FROM_CART","UPDATE_QUANTITY","UPDATE_CART_COUNT","REMOVE_ALL","TOTAL_CART","CREATE_USER","GET_USER_INFO","POST_REVIEW","GET_REVIEWS","CALCULATE_AVERAGE_RATING","SORT_PRODUCTS_BY_RATING","initialState","products","filtered","detail","selectedCategory","userInfo","footer","isSearch","isLine","shoppingCart","cartCount","totalCart","reviews","sortedProducts","reducer","_action$payload$","_action$payload$$line","_action$payload$2","_action$payload$2$lin","state","arguments","length","undefined","action","type","payload","console","log","lines","name","currentItem","find","item","id","map","quantity","currenItem","filter","productId","quantityToRemove","updatedItem","increment","allPrices","product","price","total","reduce","acc","obj","averageRating","sort","a","b","ratingA","productRatings","ratingB"],"sources":["C:/Users/Usuario/Desktop/Productos---Ecologicos/client/src/Redux/Reducer.js"],"sourcesContent":["import { GET_PRODUCTS, GET_PRODUCT_DETAIL, GET_LINE_PRODUCTS, SET_LINE, FOOTER, SEARCH_SUCCESS, SET_SEARCH, ADD_TO_CART, REMOVE_FROM_CART, UPDATE_QUANTITY, UPDATE_CART_COUNT, REMOVE_ALL, TOTAL_CART , CREATE_USER, GET_USER_INFO, POST_REVIEW, GET_REVIEWS, CALCULATE_AVERAGE_RATING, SORT_PRODUCTS_BY_RATING } from \"./Actions\";\r\n\r\n\r\nconst initialState = {\r\n    products: [],\r\n    filtered: [],\r\n    detail: [],\r\n    selectedCategory: \"\",\r\n    userInfo: [],\r\n    footer: false,\r\n    isSearch: false,\r\n    // searchResults: [], \r\n    // searchError: null,\r\n    isLine: false,\r\n    //Shopping Cart states:\r\n    shoppingCart: [],\r\n    cartCount: 0,\r\n    totalCart: 0,\r\n    reviews: [],\r\n    sortedProducts: [],\r\n}\r\n\r\nfunction reducer (state = initialState, action) {\r\nswitch (action.type) {\r\n    case GET_PRODUCTS:\r\n        return{\r\n            ...state,\r\n            products: action.payload,\r\n            filtered: action.payload,\r\n        };\r\n    case GET_PRODUCT_DETAIL:\r\n        return{\r\n            ...state,\r\n            detail: action.payload,\r\n        }\r\n\r\n    case GET_LINE_PRODUCTS:\r\n      console.log(\"State GET_LINE_PRODUCTS:\", state);\r\n        return{\r\n            ...state,\r\n            filtered: action.payload[0]?.lines[0]?.name || \"\",\r\n            products: action.payload,\r\n        }\r\n        case GET_LINE_PRODUCTS:\r\n          return{\r\n              ...state,\r\n              filtered: action.payload[0]?.lines[0]?.name || \"\",\r\n              products: action.payload,\r\n          }\r\n        \r\n\r\n      case SET_LINE:\r\n        return {\r\n        ...state,\r\n        isLine: true,\r\n      };\r\n\r\n        case FOOTER:\r\n      return {\r\n        ...state,\r\n        footer: !state.footer,\r\n      };\r\n\r\n      ////\r\n      case SEARCH_SUCCESS:\r\n        return {\r\n            ...state,\r\n            products: action.payload,\r\n        };\r\n      \r\n      case SET_SEARCH:\r\n      return {\r\n        ...state,\r\n        isSearch: true,\r\n      };\r\n      \r\n      case ADD_TO_CART:\r\n        const currentItem = state.shoppingCart.find((item) => item.id === action.payload.id); // buscar si existe el item primero en el carrito\r\n        if(currentItem) {\r\n          console.log(\"Updating quantity for item with ID:\", action.payload.id);\r\n          return { //si existe, agregarle 1 a la cantidad\r\n          ...state,\r\n          shoppingCart: state.shoppingCart.map((item) =>\r\n          item.id === action.payload.id\r\n          ? { ...item, quantity: item.quantity + 1} //si existe el item, actualizá la cantidad y agregale 1\r\n          : item\r\n          ),\r\n          cartCount: state.cartCount + 1\r\n        };\r\n        } else {\r\n          console.log(\"Adding new item to the cart:\", action.payload);\r\n          return {\r\n            ...state,\r\n            shoppingCart: [...state.shoppingCart, {...action.payload, quantity: 1 }],\r\n            cartCount: state.cartCount + 1,\r\n          }; //si no existe, agregalo y agregá una quantity con 1\r\n        };\r\n      \r\n        case REMOVE_FROM_CART:\r\n          const currenItem = state.shoppingCart.find((item) => item.id === action.payload); //primero buscar el item\r\n          if (currenItem) { //si existe el item, evaluar si es mayor que 1 su cantidad\r\n            if (currenItem.quantity > 1) {\r\n              return {\r\n                ...state,\r\n                shoppingCart: state.shoppingCart.map((item) =>\r\n                  item.id === action.payload\r\n                    ? { ...item, quantity: item.quantity - 1 }\r\n                    : item\r\n                ), // si es mayor que 1, bajar la cantidad en uno\r\n                cartCount: state.cartCount - 1, // El cartcount también baja en 1\r\n              };\r\n            } else {\r\n              // Si es 1 la cantidad, borrarlo directamente\r\n              return {\r\n                ...state,\r\n                shoppingCart: state.shoppingCart.filter((item) => item.id !== action.payload),\r\n                cartCount: state.cartCount - 1,\r\n              };\r\n            }\r\n          }\r\n          return state; // retornar el estado actual si no se encuentran el item\r\n\r\n          case REMOVE_ALL:\r\n            const { productId, quantityToRemove } = action.payload;\r\n          return{\r\n          ...state,\r\n          shoppingCart: state.shoppingCart.filter((item) => item.id !== productId),\r\n          cartCount: state.cartCount - quantityToRemove,\r\n      };\r\n\r\n        case UPDATE_QUANTITY:\r\n          const updatedItem = action.payload\r\n          if(!updatedItem) {\r\n            return state; //si no está el item retornar el estado como está\r\n          }\r\n        return {\r\n        ...state,\r\n        shoppingCart: state.shoppingCart.map((item) =>\r\n          item.id === updatedItem.id ? updatedItem : item //Buscá el item. Si está, devolvé el item updateado. Sino, devolvé el item así\r\n        ),\r\n        cartCount: state.cartCount + 1\r\n      };\r\n\r\n        case UPDATE_CART_COUNT:\r\n          const increment = action.payload; //si increment viene en true viene en el payload\r\n          return {\r\n            ...state,\r\n            cartCount: increment ? state.cartCount + 1 : state.cartCount - 1,\r\n          } // si increment está en true, sumale uno a la cuenta. Sino, restale 1.\r\n\r\n        case TOTAL_CART:\r\n          const allPrices = state.shoppingCart.map((product) => product.price * product.quantity);\r\n          const total = allPrices.reduce((acc, obj) => acc + obj, 0);\r\n          return {\r\n            ...state,\r\n            totalCart: total,\r\n          }\r\n\r\n      case CREATE_USER:\r\n        if (action.payload.id) {\r\n          return {\r\n            ...state,\r\n            userInfo: action.payload,\r\n          };\r\n        }\r\n        case GET_USER_INFO:\r\n      return {\r\n        ...state,\r\n        userInfo: action.payload,\r\n      };\r\n      case POST_REVIEW:\r\n      return {\r\n        ...state,\r\n      };\r\n\r\n      case GET_REVIEWS:\r\n        \r\n        return {\r\n          ...state,\r\n          reviews: action.payload,\r\n         \r\n        }\r\n      \r\n\r\n        case CALCULATE_AVERAGE_RATING:\r\n          return {\r\n            ...state,\r\n            averageRating: action.payload,\r\n          };\r\n\r\n          case SORT_PRODUCTS_BY_RATING:\r\n      // Realiza el ordenamiento aquí en función de productRatings y actualiza sortedProducts\r\n      const sortedProducts = [...state.products].sort((a, b) => {\r\n        const ratingA = state.reviews.productRatings[a.id] || 0; // Obtén el rating promedio para el producto A\r\n        const ratingB = state.reviews.productRatings[b.id] || 0; // Obtén el rating promedio para el producto B\r\n\r\n        return ratingB - ratingA; // Ordena de mayor a menor rating\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        sortedProducts,\r\n      };\r\n\r\n\r\n    default:\r\n        return state\r\n      }}\r\n      export default reducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const rootReducer = (state = initialState, action) => {\r\n//   switch (action.type) {\r\n//     case 'SORT_PRODUCTS_BY_RATING':\r\n//       // Realiza el ordenamiento aquí en función de reviews y actualiza sortedProducts\r\n//       const sortedProducts = [...state.products].sort((a, b) => {\r\n//         const ratingA = state.reviews.find((review) => review.productId === a.id)?.promedioRating || 0;\r\n//         const ratingB = state.reviews.find((review) => review.productId === b.id)?.promedioRating || 0;\r\n\r\n//         return ratingB - ratingA; // Ordena de mayor a menor rating\r\n//       });\r\n\r\n//       return {\r\n//         ...state,\r\n//         sortedProducts,\r\n//       };\r\n//     // Otros casos...\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}