{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import Card from \"./Card\";\n// import \"./Paginado.css\";\n\n// const Recommended = ({ cards }) => {\n//   const [visibleCardIndex, setVisibleCardIndex] = useState(0);\n//   const [isTransitioning, setIsTransitioning] = useState(false);\n//   const cardsPerPage = 4;\n\n//   const handlePrevClick = () => {\n//     if (!isTransitioning && visibleCardIndex > 0) {\n//       setIsTransitioning(true);\n//       setVisibleCardIndex((prevIndex) => prevIndex - 1);\n//     }\n//   };\n\n//   const handleNextClick = () => {\n//     if (!isTransitioning) {\n//       setIsTransitioning(true);\n//       setVisibleCardIndex((prevIndex) =>\n//         prevIndex + 1 < cards.length ? prevIndex + 1 : prevIndex\n//       );\n//     }\n//   };\n\n//   useEffect(() => {\n//     setIsTransitioning(false); // Reset the transitioning flag after state update\n//   }, [visibleCardIndex]);\n\n//   useEffect(() => {\n//     if (visibleCardIndex + cardsPerPage > cards.length) {\n//       setVisibleCardIndex(Math.max(cards.length - cardsPerPage, 0));\n//     }\n//   }, [cards]);\n\n//   const startIndex = visibleCardIndex;\n//   const endIndex = Math.min(visibleCardIndex + cardsPerPage, cards.length);\n//   const visibleCards = cards.slice(startIndex, endIndex);\n\n//   return (\n//     <div className=\"paginado-container\">\n//          <h3 className=\"left-align\" style={{ color: \"green\", fontWeight: \"bold\" }}>Recommended</h3>\n//       <div className=\"cards-container\">\n//         <button\n//           className=\"pagination-button\"\n//           onClick={handlePrevClick}\n//           disabled={visibleCardIndex === 0 || isTransitioning}\n//         >\n//           &lt;\n//         </button>\n//         {visibleCards.map((card) => (\n//           <Card\n//             key={card.id}\n//             id={card.id}\n//             images={card.images}\n//             name={card.name}\n//             price={card.price}\n//           />\n//         ))}\n//         <button\n//           className=\"pagination-button\"\n//           onClick={handleNextClick}\n//           disabled={visibleCardIndex + cardsPerPage >= cards.length || isTransitioning}\n//         >\n//           &gt;\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Recommended;\n\n/////////////////////////////////////////////\n\n//Renderiza primero las cards que tiene mayor rating\n// import React, { useState, useEffect } from \"react\";\n// import Card from \"./Card\";\n// import \"./Paginado.css\";\n\n// const Recommended = ({ cards }) => {\n//   const [visibleCardIndex, setVisibleCardIndex] = useState(0);\n//   const [isTransitioning, setIsTransitioning] = useState(false);\n//   const cardsPerPage = 4;\n\n//   const handlePrevClick = () => {\n//     if (!isTransitioning && visibleCardIndex > 0) {\n//       setIsTransitioning(true);\n//       setVisibleCardIndex((prevIndex) => prevIndex - 1);\n//     }\n//   };\n\n//   const handleNextClick = () => {\n//     if (!isTransitioning) {\n//       setIsTransitioning(true);\n//       setVisibleCardIndex((prevIndex) =>\n//         prevIndex + 1 < cards.length ? prevIndex + 1 : prevIndex\n//       );\n//     }\n//   };\n\n//   useEffect(() => {\n//     setIsTransitioning(false); // Reset the transitioning flag after state update\n//   }, [visibleCardIndex]);\n\n//   useEffect(() => {\n//     if (visibleCardIndex + cardsPerPage > cards.length) {\n//       setVisibleCardIndex(Math.max(cards.length - cardsPerPage, 0));\n//     }\n//   }, [cards]);\n\n//   // Ordena las tarjetas por promedioRating descendente antes de renderizar\n//   const sortedCards = [...cards].sort((a, b) => b.reviews.promedioRating - a.reviews.promedioRating);\n\n//   const startIndex = visibleCardIndex;\n//   const endIndex = Math.min(visibleCardIndex + cardsPerPage, sortedCards.length);\n//   const visibleCards = sortedCards.slice(startIndex, endIndex);\n\n//   return (\n//     <div className=\"paginado-container\">\n//       <h3 className=\"left-align\" style={{ color: \"green\", fontWeight: \"bold\" }}>Recommended</h3>\n//       <div className=\"cards-container\">\n//         <button\n//           className=\"pagination-button\"\n//           onClick={handlePrevClick}\n//           disabled={visibleCardIndex === 0 || isTransitioning}\n//         >\n//           &lt;\n//         </button>\n//         {visibleCards.map((card) => (\n//           <Card\n//             key={card.id}\n//             id={card.id}\n//             images={card.images}\n//             name={card.name}\n//             price={card.price}\n//           />\n//         ))}\n//         <button\n//           className=\"pagination-button\"\n//           onClick={handleNextClick}\n//           disabled={visibleCardIndex + cardsPerPage >= sortedCards.length || isTransitioning}\n//         >\n//           &gt;\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Recommended;\n\n////renderiza las de promedio de 5","map":{"version":3,"names":[],"sources":["C:/Users/Usuario/Desktop/Productos---Ecologicos/client/src/components/Cards/Recommended.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import Card from \"./Card\";\r\n// import \"./Paginado.css\";\r\n\r\n// const Recommended = ({ cards }) => {\r\n//   const [visibleCardIndex, setVisibleCardIndex] = useState(0);\r\n//   const [isTransitioning, setIsTransitioning] = useState(false);\r\n//   const cardsPerPage = 4;\r\n\r\n//   const handlePrevClick = () => {\r\n//     if (!isTransitioning && visibleCardIndex > 0) {\r\n//       setIsTransitioning(true);\r\n//       setVisibleCardIndex((prevIndex) => prevIndex - 1);\r\n//     }\r\n//   };\r\n\r\n//   const handleNextClick = () => {\r\n//     if (!isTransitioning) {\r\n//       setIsTransitioning(true);\r\n//       setVisibleCardIndex((prevIndex) =>\r\n//         prevIndex + 1 < cards.length ? prevIndex + 1 : prevIndex\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     setIsTransitioning(false); // Reset the transitioning flag after state update\r\n//   }, [visibleCardIndex]);\r\n\r\n//   useEffect(() => {\r\n//     if (visibleCardIndex + cardsPerPage > cards.length) {\r\n//       setVisibleCardIndex(Math.max(cards.length - cardsPerPage, 0));\r\n//     }\r\n//   }, [cards]);\r\n\r\n//   const startIndex = visibleCardIndex;\r\n//   const endIndex = Math.min(visibleCardIndex + cardsPerPage, cards.length);\r\n//   const visibleCards = cards.slice(startIndex, endIndex);\r\n\r\n//   return (\r\n//     <div className=\"paginado-container\">\r\n//          <h3 className=\"left-align\" style={{ color: \"green\", fontWeight: \"bold\" }}>Recommended</h3>\r\n//       <div className=\"cards-container\">\r\n//         <button\r\n//           className=\"pagination-button\"\r\n//           onClick={handlePrevClick}\r\n//           disabled={visibleCardIndex === 0 || isTransitioning}\r\n//         >\r\n//           &lt;\r\n//         </button>\r\n//         {visibleCards.map((card) => (\r\n//           <Card\r\n//             key={card.id}\r\n//             id={card.id}\r\n//             images={card.images}\r\n//             name={card.name}\r\n//             price={card.price}\r\n//           />\r\n//         ))}\r\n//         <button\r\n//           className=\"pagination-button\"\r\n//           onClick={handleNextClick}\r\n//           disabled={visibleCardIndex + cardsPerPage >= cards.length || isTransitioning}\r\n//         >\r\n//           &gt;\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Recommended;\r\n\r\n/////////////////////////////////////////////\r\n\r\n\r\n//Renderiza primero las cards que tiene mayor rating\r\n// import React, { useState, useEffect } from \"react\";\r\n// import Card from \"./Card\";\r\n// import \"./Paginado.css\";\r\n\r\n// const Recommended = ({ cards }) => {\r\n//   const [visibleCardIndex, setVisibleCardIndex] = useState(0);\r\n//   const [isTransitioning, setIsTransitioning] = useState(false);\r\n//   const cardsPerPage = 4;\r\n\r\n//   const handlePrevClick = () => {\r\n//     if (!isTransitioning && visibleCardIndex > 0) {\r\n//       setIsTransitioning(true);\r\n//       setVisibleCardIndex((prevIndex) => prevIndex - 1);\r\n//     }\r\n//   };\r\n\r\n//   const handleNextClick = () => {\r\n//     if (!isTransitioning) {\r\n//       setIsTransitioning(true);\r\n//       setVisibleCardIndex((prevIndex) =>\r\n//         prevIndex + 1 < cards.length ? prevIndex + 1 : prevIndex\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     setIsTransitioning(false); // Reset the transitioning flag after state update\r\n//   }, [visibleCardIndex]);\r\n\r\n//   useEffect(() => {\r\n//     if (visibleCardIndex + cardsPerPage > cards.length) {\r\n//       setVisibleCardIndex(Math.max(cards.length - cardsPerPage, 0));\r\n//     }\r\n//   }, [cards]);\r\n\r\n//   // Ordena las tarjetas por promedioRating descendente antes de renderizar\r\n//   const sortedCards = [...cards].sort((a, b) => b.reviews.promedioRating - a.reviews.promedioRating);\r\n\r\n//   const startIndex = visibleCardIndex;\r\n//   const endIndex = Math.min(visibleCardIndex + cardsPerPage, sortedCards.length);\r\n//   const visibleCards = sortedCards.slice(startIndex, endIndex);\r\n\r\n//   return (\r\n//     <div className=\"paginado-container\">\r\n//       <h3 className=\"left-align\" style={{ color: \"green\", fontWeight: \"bold\" }}>Recommended</h3>\r\n//       <div className=\"cards-container\">\r\n//         <button\r\n//           className=\"pagination-button\"\r\n//           onClick={handlePrevClick}\r\n//           disabled={visibleCardIndex === 0 || isTransitioning}\r\n//         >\r\n//           &lt;\r\n//         </button>\r\n//         {visibleCards.map((card) => (\r\n//           <Card\r\n//             key={card.id}\r\n//             id={card.id}\r\n//             images={card.images}\r\n//             name={card.name}\r\n//             price={card.price}\r\n//           />\r\n//         ))}\r\n//         <button\r\n//           className=\"pagination-button\"\r\n//           onClick={handleNextClick}\r\n//           disabled={visibleCardIndex + cardsPerPage >= sortedCards.length || isTransitioning}\r\n//         >\r\n//           &gt;\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Recommended;\r\n\r\n\r\n////renderiza las de promedio de 5 \r\n\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA"},"metadata":{},"sourceType":"module"}